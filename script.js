let toDoList = JSON.parse(localStorage.getItem("todos")) || [];

const form = document.querySelector(".form");
const todoContent = document.querySelector(".todo__content");
const removeCompletedBtn = document.querySelector(".btn__delete");
const removeAllTasksBtn = document.querySelector(".btn__deleteall");

// –°–æ–±—ã—Ç–∏–µ DOMContentLoaded –≤ JavaScript –æ–∑–Ω–∞—á–∞–µ—Ç,
// —á—Ç–æ HTML-–¥–æ–∫—É–º–µ–Ω—Ç –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞–∑–æ–±—Ä–∞–Ω –±—Ä–∞—É–∑–µ—Ä–æ–º,
// –Ω–æ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞—Ä—Ç–∏–Ω–∫–∏, —Å—Ç–∏–ª–∏, –≤–∏–¥–µ–æ) –º–æ–≥—É—Ç –µ—â—ë –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è.
document.addEventListener("DOMContentLoaded", () => {
  renderTasks();
});

form.addEventListener("submit", (event) => {
  event.preventDefault();
  let input = event.target[0];
  let inputValue = input.value.trim();

  if (inputValue) {
    addTask(inputValue);
  }

  input.value = ""; //! –æ—Ç—á–∏—Å—Ç–∫–∞ input –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
});

removeCompletedBtn.addEventListener("click", () => removeCompletedTasks());
removeAllTasksBtn.addEventListener("click", () => removeAllTasks());

function removeAllTasks() {
  toDoList.length = 0;
  /*   localStorage.clear(); */
  saveToLocolStorage();
  renderTasks();
}

function removeCompletedTasks() {
  toDoList = toDoList.filter((el) => !el.isCompleted);
  saveToLocolStorage();
  renderTasks();
}

function saveToLocolStorage() {
  localStorage.setItem("todos", JSON.stringify(toDoList));
}

function addTask(taskText) {
  let task = {
    text: taskText,
    id: Date.now(),
    isCompleted: false,
  };

  toDoList.push(task);
  saveToLocolStorage();
  renderTasks();
}

function removeTask(id, arr) {
  toDoList = arr.filter((el) => el.id !== id);
  saveToLocolStorage();
  renderTasks();
}

function toggleTaskCompletion(id, arr) {
  toDoList = arr.map((el) =>
    el.id === id ? { ...el, isCompleted: !el.isCompleted } : el
  );
  saveToLocolStorage();
  renderTasks();
}

function editTask(id, text) {
  toDoList = toDoList.map((el) => (el.id === id ? { ...el, text } : el));
  saveToLocolStorage();
  renderTasks();
}

function renderTasks() {
  let tasks = document.querySelector(".tasks");

  if (!tasks) {
    // –ï—Å–ª–∏ —Å–ø–∏—Å–∫–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º
    tasks = document.createElement("ul");
    tasks.classList.add("tasks");
    todoContent.append(tasks);
  } else {
    // –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ—á–∏—â–∞–µ–º
    tasks.innerHTML = "";
  }

  toDoList.forEach((task) => {
    const listItem = document.createElement("li");
    listItem.classList.add("listItem");

    listItem.innerHTML = `
      <input type="checkbox" ${task.isCompleted ? "checked" : ""}/>
      <p class="task__text ${task.isCompleted ? "completed" : ""}" >${
      task.text
    }</p>
    <input type="text" class="edit__input" value="${
      task.text
    }" style="display: none;"/>
    <div class="buttons__task">
    <button class="edit__btn" type="button"><img src="./icons/‚úèÔ∏è.png" alt=""/>
</button>
      <button class="remove__btn" type="button"><img src="./icons/‚ùå.png" alt=""/></button>
    </div>
      
      
    `;

    const checkbox = listItem.querySelector('input[type="checkbox"]');
    checkbox.addEventListener("change", () =>
      toggleTaskCompletion(task.id, toDoList)
    );

    const removeBtn = listItem.querySelector(".remove__btn");
    removeBtn.addEventListener("click", () => removeTask(task.id, toDoList));

    const editBtn = listItem.querySelector(".edit__btn");
    const taskText = listItem.querySelector(".task__text");
    const editInput = listItem.querySelector(".edit__input");
    editBtn.addEventListener("click", () => {
      listItem.classList.toggle("editing");
      editBtn.innerHTML = listItem.classList.contains("editing")
        ? `<img src="./icons/‚úÖ.png" alt="" >`
        : `<img src="./icons/‚úèÔ∏è.png" alt=""/>`;
      removeBtn.innerHTML = listItem.classList.contains("editing")
        ? `<img src="./icons/üóë.png" alt="" />`
        : `<img src="./icons/‚ùå.png" alt=""/>`;
      taskText.style.display = listItem.classList.contains("editing")
        ? "none"
        : "block";
      editInput.style.display = listItem.classList.contains("editing")
        ? "block"
        : "none";
    });
    if (listItem.classList.contains("editing")) {
      editInput.focus();
    }
    editInput.addEventListener("blur", () => {
      const newText = editInput.value.trim();

      if (newText) {
        editTask(task.id, newText);
        listItem.classList.remove("editing");
        taskText.style.display = "block";
        editInput.style.display = "none";
        return;
      }
      taskText.style.display = "block";
      editInput.style.display = "none";
    });

    tasks.append(listItem);
  });
}


/* 1. –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 
–∫–æ—Ç–æ—Ä–≤–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ id 
2. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –ª–∏–±–æ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞, –ª–∏–±–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä–∞–Ω–¥–∞—à


3. –ø–æ—Å–º–æ—Ç—å—Ä–µ—Ç—å —Ç–µ–º—É LocolStorage
*/

/* console.log(form); */

/* 1. –í–´–í–ï–°–¢–ò –í –ö–û–ù–°–æ–ª—å –∫–∞–∫ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∑–∞–¥–∞—á–∏ –≤ –º–∞—Å–∏–≤
1.1 –ø–æ–≤–µ—Å–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Ñ–æ—Ä–º—É (—Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã)
1.2. –¥–æ—Å—Ç–∞—Ç—å value input 
event.target.value
—Å—â–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç task

—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å –∑–∞–¥–∞—á–∞–º–∏

todocontent –≤–≤—ã–Ω–µ—Å—Ç–∏ –∏–∑ forEach

–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
–ø—Ä–∏ –≤–≤—ã–∑–æ–µ renderTasks, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–ø–∏—Å–æ–∫ —Å –∑–∞–¥–∞—á–∞–º–∏, –µ—Å–ª–∏ –Ω–µ—Ç, 
—Ç–æ —Å–æ–∑–¥–∞—Ç—å –∏ —Å–¥–µ–ª–∞—Ç—å append, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –æ—Ç—á–∏—Å—Ç–∏—Ç—å.

–í—ã–Ω–µ—Å—Ç–∏ –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

–≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
*/
